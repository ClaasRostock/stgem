# Generated from stlLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,28,301,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,4,0,73,8,0,11,0,12,0,74,1,0,1,0,1,1,1,
        1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,
        9,1,10,1,10,1,10,1,10,3,10,101,8,10,1,11,1,11,1,11,1,11,1,11,3,11,
        108,8,11,1,12,1,12,1,12,1,12,3,12,114,8,12,1,13,1,13,1,13,1,13,1,
        13,3,13,121,8,13,1,13,3,13,124,8,13,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,3,14,146,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,165,8,15,1,16,1,16,
        1,16,1,16,1,16,1,16,3,16,173,8,16,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,3,17,183,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        3,18,193,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,202,8,19,1,
        20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,213,8,20,1,21,1,
        21,1,21,1,21,1,21,1,21,3,21,221,8,21,1,22,1,22,1,22,1,22,1,23,1,
        23,1,23,5,23,230,8,23,10,23,12,23,233,9,23,1,24,3,24,236,8,24,1,
        24,1,24,3,24,240,8,24,1,24,1,24,3,24,244,8,24,1,24,3,24,247,8,24,
        1,25,1,25,1,26,1,26,1,27,1,27,1,27,3,27,256,8,27,1,27,1,27,1,28,
        1,28,5,28,262,8,28,10,28,12,28,265,9,28,1,28,4,28,268,8,28,11,28,
        12,28,269,3,28,272,8,28,1,29,1,29,1,30,1,30,1,30,3,30,279,8,30,1,
        30,1,30,3,30,283,8,30,1,31,1,31,1,32,4,32,288,8,32,11,32,12,32,289,
        1,33,1,33,1,33,1,33,1,33,1,34,4,34,298,8,34,11,34,12,34,299,0,0,
        35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,0,59,0,61,0,63,0,65,0,67,0,69,0,1,
        0,8,3,0,9,10,13,13,32,32,2,0,33,33,126,126,2,0,60,60,62,62,2,0,48,
        57,95,95,2,0,69,69,101,101,1,0,49,57,1,0,48,57,2,0,65,90,97,122,
        331,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,72,1,0,0,0,3,78,1,0,0,0,
        5,80,1,0,0,0,7,82,1,0,0,0,9,84,1,0,0,0,11,86,1,0,0,0,13,88,1,0,0,
        0,15,90,1,0,0,0,17,92,1,0,0,0,19,94,1,0,0,0,21,100,1,0,0,0,23,107,
        1,0,0,0,25,113,1,0,0,0,27,120,1,0,0,0,29,145,1,0,0,0,31,164,1,0,
        0,0,33,172,1,0,0,0,35,182,1,0,0,0,37,192,1,0,0,0,39,201,1,0,0,0,
        41,212,1,0,0,0,43,220,1,0,0,0,45,222,1,0,0,0,47,226,1,0,0,0,49,246,
        1,0,0,0,51,248,1,0,0,0,53,250,1,0,0,0,55,252,1,0,0,0,57,271,1,0,
        0,0,59,273,1,0,0,0,61,282,1,0,0,0,63,284,1,0,0,0,65,287,1,0,0,0,
        67,291,1,0,0,0,69,297,1,0,0,0,71,73,7,0,0,0,72,71,1,0,0,0,73,74,
        1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,76,1,0,0,0,76,77,6,0,0,0,
        77,2,1,0,0,0,78,79,5,40,0,0,79,4,1,0,0,0,80,81,5,41,0,0,81,6,1,0,
        0,0,82,83,5,91,0,0,83,8,1,0,0,0,84,85,5,93,0,0,85,10,1,0,0,0,86,
        87,5,44,0,0,87,12,1,0,0,0,88,89,5,43,0,0,89,14,1,0,0,0,90,91,5,45,
        0,0,91,16,1,0,0,0,92,93,5,42,0,0,93,18,1,0,0,0,94,95,5,47,0,0,95,
        20,1,0,0,0,96,101,7,1,0,0,97,98,5,110,0,0,98,99,5,111,0,0,99,101,
        5,116,0,0,100,96,1,0,0,0,100,97,1,0,0,0,101,22,1,0,0,0,102,108,7,
        2,0,0,103,104,5,60,0,0,104,108,5,61,0,0,105,106,5,62,0,0,106,108,
        5,61,0,0,107,102,1,0,0,0,107,103,1,0,0,0,107,105,1,0,0,0,108,24,
        1,0,0,0,109,110,5,61,0,0,110,114,5,61,0,0,111,112,5,33,0,0,112,114,
        5,61,0,0,113,109,1,0,0,0,113,111,1,0,0,0,114,26,1,0,0,0,115,116,
        5,110,0,0,116,117,5,101,0,0,117,118,5,120,0,0,118,121,5,116,0,0,
        119,121,5,88,0,0,120,115,1,0,0,0,120,119,1,0,0,0,121,123,1,0,0,0,
        122,124,5,95,0,0,123,122,1,0,0,0,123,124,1,0,0,0,124,28,1,0,0,0,
        125,126,5,102,0,0,126,127,5,105,0,0,127,128,5,110,0,0,128,129,5,
        97,0,0,129,130,5,108,0,0,130,131,5,108,0,0,131,146,5,121,0,0,132,
        133,5,101,0,0,133,134,5,118,0,0,134,135,5,101,0,0,135,136,5,110,
        0,0,136,137,5,116,0,0,137,138,5,117,0,0,138,139,5,97,0,0,139,140,
        5,108,0,0,140,141,5,108,0,0,141,146,5,121,0,0,142,146,5,70,0,0,143,
        144,5,60,0,0,144,146,5,62,0,0,145,125,1,0,0,0,145,132,1,0,0,0,145,
        142,1,0,0,0,145,143,1,0,0,0,146,30,1,0,0,0,147,148,5,103,0,0,148,
        149,5,108,0,0,149,150,5,111,0,0,150,151,5,98,0,0,151,152,5,97,0,
        0,152,153,5,108,0,0,153,154,5,108,0,0,154,165,5,121,0,0,155,156,
        5,97,0,0,156,157,5,108,0,0,157,158,5,119,0,0,158,159,5,97,0,0,159,
        160,5,121,0,0,160,165,5,115,0,0,161,165,5,71,0,0,162,163,5,91,0,
        0,163,165,5,93,0,0,164,147,1,0,0,0,164,155,1,0,0,0,164,161,1,0,0,
        0,164,162,1,0,0,0,165,32,1,0,0,0,166,167,5,117,0,0,167,168,5,110,
        0,0,168,169,5,116,0,0,169,170,5,105,0,0,170,173,5,108,0,0,171,173,
        5,85,0,0,172,166,1,0,0,0,172,171,1,0,0,0,173,34,1,0,0,0,174,175,
        5,114,0,0,175,176,5,101,0,0,176,177,5,108,0,0,177,178,5,101,0,0,
        178,179,5,97,0,0,179,180,5,115,0,0,180,183,5,101,0,0,181,183,5,82,
        0,0,182,174,1,0,0,0,182,181,1,0,0,0,183,36,1,0,0,0,184,185,5,97,
        0,0,185,186,5,110,0,0,186,193,5,100,0,0,187,188,5,47,0,0,188,193,
        5,92,0,0,189,190,5,38,0,0,190,193,5,38,0,0,191,193,5,38,0,0,192,
        184,1,0,0,0,192,187,1,0,0,0,192,189,1,0,0,0,192,191,1,0,0,0,193,
        38,1,0,0,0,194,195,5,111,0,0,195,202,5,114,0,0,196,197,5,92,0,0,
        197,202,5,47,0,0,198,199,5,124,0,0,199,202,5,124,0,0,200,202,5,124,
        0,0,201,194,1,0,0,0,201,196,1,0,0,0,201,198,1,0,0,0,201,200,1,0,
        0,0,202,40,1,0,0,0,203,204,5,105,0,0,204,205,5,109,0,0,205,206,5,
        112,0,0,206,207,5,108,0,0,207,208,5,105,0,0,208,209,5,101,0,0,209,
        213,5,115,0,0,210,211,5,45,0,0,211,213,5,62,0,0,212,203,1,0,0,0,
        212,210,1,0,0,0,213,42,1,0,0,0,214,215,5,105,0,0,215,216,5,102,0,
        0,216,221,5,102,0,0,217,218,5,60,0,0,218,219,5,45,0,0,219,221,5,
        62,0,0,220,214,1,0,0,0,220,217,1,0,0,0,221,44,1,0,0,0,222,223,5,
        105,0,0,223,224,5,110,0,0,224,225,5,102,0,0,225,46,1,0,0,0,226,231,
        3,69,34,0,227,230,3,69,34,0,228,230,7,3,0,0,229,227,1,0,0,0,229,
        228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,
        48,1,0,0,0,233,231,1,0,0,0,234,236,3,15,7,0,235,234,1,0,0,0,235,
        236,1,0,0,0,236,237,1,0,0,0,237,247,3,51,25,0,238,240,3,15,7,0,239,
        238,1,0,0,0,239,240,1,0,0,0,240,241,1,0,0,0,241,247,3,53,26,0,242,
        244,3,15,7,0,243,242,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,
        247,3,55,27,0,246,235,1,0,0,0,246,239,1,0,0,0,246,243,1,0,0,0,247,
        50,1,0,0,0,248,249,3,57,28,0,249,52,1,0,0,0,250,251,3,61,30,0,251,
        54,1,0,0,0,252,253,3,61,30,0,253,255,7,4,0,0,254,256,3,15,7,0,255,
        254,1,0,0,0,255,256,1,0,0,0,256,257,1,0,0,0,257,258,3,57,28,0,258,
        56,1,0,0,0,259,263,3,59,29,0,260,262,3,63,31,0,261,260,1,0,0,0,262,
        265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,272,1,0,0,0,265,
        263,1,0,0,0,266,268,5,48,0,0,267,266,1,0,0,0,268,269,1,0,0,0,269,
        267,1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,259,1,0,0,0,271,
        267,1,0,0,0,272,58,1,0,0,0,273,274,7,5,0,0,274,60,1,0,0,0,275,276,
        3,65,32,0,276,278,5,46,0,0,277,279,3,65,32,0,278,277,1,0,0,0,278,
        279,1,0,0,0,279,283,1,0,0,0,280,281,5,46,0,0,281,283,3,65,32,0,282,
        275,1,0,0,0,282,280,1,0,0,0,283,62,1,0,0,0,284,285,7,6,0,0,285,64,
        1,0,0,0,286,288,7,6,0,0,287,286,1,0,0,0,288,289,1,0,0,0,289,287,
        1,0,0,0,289,290,1,0,0,0,290,66,1,0,0,0,291,292,5,86,0,0,292,293,
        5,97,0,0,293,294,5,114,0,0,294,295,5,95,0,0,295,68,1,0,0,0,296,298,
        7,7,0,0,297,296,1,0,0,0,298,299,1,0,0,0,299,297,1,0,0,0,299,300,
        1,0,0,0,300,70,1,0,0,0,29,0,74,100,107,113,120,123,145,164,172,182,
        192,201,212,220,229,231,235,239,243,246,255,263,269,271,278,282,
        289,299,1,6,0,0
    ]

class stlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    LPAREN = 2
    RPAREN = 3
    LBRACK = 4
    RBRACK = 5
    COMMA = 6
    PLUS = 7
    MINUS = 8
    MULT = 9
    DIV = 10
    NEGATION = 11
    RELOP = 12
    EQUALITYOP = 13
    NEXTOP = 14
    FUTUREOP = 15
    GLOBALLYOP = 16
    UNTILOP = 17
    RELEASEOP = 18
    ANDOP = 19
    OROP = 20
    IMPLIESOP = 21
    EQUIVOP = 22
    INF = 23
    NAME = 24
    NUMBER = 25
    INT_NUMBER = 26
    FLOAT_NUMBER = 27
    SCIENTIFIC_NUMBER = 28

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'['", "']'", "','", "'+'", "'-'", "'*'", "'/'", 
            "'inf'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "COMMA", "PLUS", 
            "MINUS", "MULT", "DIV", "NEGATION", "RELOP", "EQUALITYOP", "NEXTOP", 
            "FUTUREOP", "GLOBALLYOP", "UNTILOP", "RELEASEOP", "ANDOP", "OROP", 
            "IMPLIESOP", "EQUIVOP", "INF", "NAME", "NUMBER", "INT_NUMBER", 
            "FLOAT_NUMBER", "SCIENTIFIC_NUMBER" ]

    ruleNames = [ "WS", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "COMMA", 
                  "PLUS", "MINUS", "MULT", "DIV", "NEGATION", "RELOP", "EQUALITYOP", 
                  "NEXTOP", "FUTUREOP", "GLOBALLYOP", "UNTILOP", "RELEASEOP", 
                  "ANDOP", "OROP", "IMPLIESOP", "EQUIVOP", "INF", "NAME", 
                  "NUMBER", "INT_NUMBER", "FLOAT_NUMBER", "SCIENTIFIC_NUMBER", 
                  "DECIMAL_INTEGER", "NON_ZERO_DIGIT", "DECIMAL_FLOAT", 
                  "DIGIT", "DIGITS", "PREFIX", "LETTER" ]

    grammarFileName = "stlLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


